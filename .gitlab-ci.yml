stages:
  - lint
  - build
  - test
  - deploy

variables:
  ROS_DISTRO: "noetic"
  CATKIN_WS: "${CI_PROJECT_DIR}/ros_ws"
  DEBIAN_FRONTEND: "noninteractive"

# Common setup commands used in multiple jobs
.ros_setup:
  image: ros:${ROS_DISTRO}
  before_script:
    - apt-get update -q
    - apt-get install -y python3-pip python3-catkin-tools python3-rosdep git
    - pip3 install pytest pytest-cov
    - rosdep update
    - source /opt/ros/${ROS_DISTRO}/setup.bash

lint:
  stage: lint
  extends: .ros_setup
  script:
    # Install linting tools
    - apt-get install -y python3-catkin-lint clang-format
    # Run catkin_lint with warnings as warnings, not errors
    - cd ${CATKIN_WS}
    - catkin_lint src/ || echo "Lint warnings found, but continuing pipeline"
    # Format check C++ code
    - find src/ -name "*.cpp" -o -name "*.h" -o -name "*.hpp" | xargs clang-format --dry-run || echo "Formatting issues found"
    # Add shebang to Python scripts missing it
    - find src/ -name "*.py" -exec grep -L "^#\!/usr/bin/env python" {} \; | xargs -r -I{} echo "Missing shebang in {}"
  allow_failure: true

build:
  stage: build
  extends: .ros_setup
  script:
    - cd ${CATKIN_WS}
    # Install dependencies but continue even if some fail
    - rosdep install --from-paths src --ignore-src -r -y || true
    # Build packages
    - catkin_make -j$(nproc) || (echo "Build failed with errors - check logs"; exit 1)
    # Verify that setup.bash was created
    - test -f devel/setup.bash || (echo "Build did not produce setup.bash"; exit 1)
  artifacts:
    paths:
      - ${CATKIN_WS}/build/
      - ${CATKIN_WS}/devel/
    expire_in: 1 day

test:
  stage: test
  extends: .ros_setup
  dependencies:
    - build
  script:
    # Install only ROS-specific testing dependencies (skip heavy ML libraries)
    - pip3 install --no-cache-dir pytest pytest-cov

    # Source the workspace
    - source ${CATKIN_WS}/devel/setup.bash
    
    # List packages to verify build worked
    - echo "Checking built packages:"
    - "rospack list | grep ${CATKIN_WS} || echo 'Warning: No packages found in workspace'"
    
    # Run tests if they exist
    - cd ${CATKIN_WS}
    - catkin_make run_tests -j2 || echo "Some tests failed or no tests exist"
    
    # Report test results but don't fail the pipeline if tests fail
    - catkin_test_results --verbose || echo "Test failures detected"
    
    # Launch file validation
    - echo "Checking launch files:" 
    - find ${CATKIN_WS}/src -name "*.launch" -exec roslaunch-check {} \; || echo "Launch file validation issues found"
    
    # For Python nodes, run pytest on test directories (only for ROS-specific tests)
    - echo "Running Python tests:"
    - find ${CATKIN_WS}/src -path "*/test/*.py" -exec python3 -m pytest {} \; || echo "Python test failures detected"
  artifacts:
    paths:
      - ${CATKIN_WS}/build/test_results/
    reports:
      junit: ${CATKIN_WS}/build/test_results/**/*.xml
    when: always

deploy:
  stage: deploy
  image: alpine
  script:
    - echo "Deploying application..."
  only:
    - main
  when: manual