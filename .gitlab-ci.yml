stages:
  - lint
  - build
  - test
  - deploy

variables:
  ROS_DISTRO: "noetic"
  CATKIN_WS: "${CI_PROJECT_DIR}/ros_ws"
  DEBIAN_FRONTEND: "noninteractive"

.ros_base:
  image: ros:${ROS_DISTRO}
  before_script:
    - apt-get update -q
    - apt-get install -y python3-pip python3-rosdep git
    - pip3 install pytest pytest-cov
    - rosdep update

lint_ros:
  stage: lint
  extends: .ros_base
  script:
    - apt-get install -y python3-catkin-lint clang-format
    - cd ${CATKIN_WS}
    - catkin_lint src/
    - find src/ -name "*.cpp" -o -name "*.h" -o -name "*.hpp" | xargs clang-format --dry-run --Werror

build_ros:
  stage: build
  extends: .ros_base
  script:
    - cd ${CATKIN_WS}
    - apt-get install -y python3-catkin-tools
    - rosdep install --from-paths src --ignore-src -r -y
    - source /opt/ros/${ROS_DISTRO}/setup.bash
    - catkin_make -j$(nproc)
  artifacts:
    paths:
      - ${CATKIN_WS}/build/
      - ${CATKIN_WS}/devel/
    expire_in: 1 day

test_ros:
  stage: test
  extends: .ros_base
  dependencies:
    - build_ros
  script:
    - apt-get update -q && apt-get install -y python3-pip python3-catkin-tools python3-pytest
    - if [ -f requirements.txt ]; then pip3 install -r requirements.txt; fi
    
    # Source ROS and the built workspace
    - source /opt/ros/${ROS_DISTRO}/setup.bash
    - source ${CATKIN_WS}/devel/setup.bash
    
    # List available packages and verify they're properly installed
    - echo "Checking ROS packages:"
    - rospack list | grep ${CATKIN_WS} || { echo "No packages found in workspace"; exit 1; }
    
    # Run unit tests for all packages in the workspace
    - cd ${CATKIN_WS}
    - catkin_make run_tests -j4
    
    # Verify test results and fail if tests failed
    - catkin_test_results --verbose
    
    # Run roslaunch checks for all launch files
    - echo "Validating launch files:"
    - find ${CATKIN_WS}/src -name "*.launch" -exec roslaunch-check {} \;
    
    # For Python nodes, run pytest on test directories
    - echo "Running Python tests:"
    - find ${CATKIN_WS}/src -path "*/test/*.py" -exec python3 -m pytest {} \;
    
    # Check that nodes can be rosrun without errors (optional, can be uncommented)
    # - echo "Testing node initialization:"
    # - cd ${CATKIN_WS}
    # - for pkg in $(find src -name "package.xml" | xargs dirname | xargs basename); do
    #     for node in $(find src/$pkg -type f -executable -not -path "*/\.*" | xargs basename); do
    #       timeout 5s rosrun $pkg $node --help || echo "Node $pkg/$node failed to run";
    #     done
    #   done
  artifacts:
    paths:
      - ${CATKIN_WS}/build/test_results/
    reports:
      junit: ${CATKIN_WS}/build/test_results/**/*.xml
    when: always

deploy:
  stage: deploy
  image: alpine
  script:
    - echo "Deploying application..."
  # only:
  #   - main
  # when: manual