# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:
  - lint
  - build
  - test
  - deploy

variables:
  PYTHON_VERSION: "3.8"
  OPENCV_VERSION: "4.5.5"

# Cache pip dependencies between jobs
cache:
  paths:
    - .pip-cache/

before_script:
  - python -V
  - pip install --cache-dir=.pip-cache -U pip
  - pip --cache-dir=.pip-cache install opencv-python mediapipe numpy pillow

# lint:
#   stage: lint
#   image: python:${PYTHON_VERSION}
#   script:
#     - pip --cache-dir=.pip-cache install flake8
#     - flake8 --max-line-length=120 *.py lib/*.py catkin_ws/src/skeleton_tracker/src/*.py

build:
  stage: build
  image: python:${PYTHON_VERSION}
  script:
    - mkdir -p build
    - cp -r lib build/
    - cp detect_pose_video.py build/
    - cp detect_pose_image_matplot.py build/
  artifacts:
    paths:
      - build/

test:python:
  stage: test
  image: python:${PYTHON_VERSION}
  before_script:
    - python -V
    - pip install --cache-dir=.pip-cache -U pip
    - apt-get update && apt-get install -y libgl1-mesa-glx libglib2.0-0
    - pip --cache-dir=.pip-cache install opencv-python mediapipe numpy pillow
  script:
    - cd build
    - python -c "import mediapipe; import cv2; import numpy; print('Dependencies imported successfully')"
    - python -c "from lib.mp_util import PoseLandmarker; print('Module imports working')"
  dependencies:
    - build

test:ros:
  stage: test
  image: ros:noetic
  before_script:
    - apt-get update && apt-get install -y python3-pip libgl1-mesa-glx libglib2.0-0
    - pip3 install opencv-python mediapipe numpy
    - source /opt/ros/noetic/setup.bash
  script:
    - cd catkin_ws
    - catkin_make
    - source devel/setup.bash
    - rospack find skeleton_tracker
  only:
    changes:
      - catkin_ws/**/*

deploy:
  stage: deploy
  image: python:${PYTHON_VERSION}
  before_script:
    - python -V
    - pip install --cache-dir=.pip-cache -U pip
    - apt-get update && apt-get install -y libgl1-mesa-glx libglib2.0-0
  script:
    - echo "Deploying application..."
    - mkdir -p /deploy
    - cp -r build/* /deploy/
  only:
    - main
  environment:
    name: production
